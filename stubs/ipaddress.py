# Stubs for ipaddress (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any

IPV4LENGTH = Undefined(Any)
IPV6LENGTH = Undefined(Any)

class AddressValueError(ValueError): pass
class NetmaskValueError(ValueError): pass

def ip_address(address): pass
def ip_network(address, strict=True): pass
def ip_interface(address): pass
def v4_int_to_packed(address): pass
def v6_int_to_packed(address): pass
def summarize_address_range(first, last): pass
def collapse_addresses(addresses): pass
def get_mixed_type_key(obj): pass

class _IPAddressBase:
    @property
    def exploded(self): pass
    @property
    def compressed(self): pass
    @property
    def version(self): pass

class _BaseAddress(_IPAddressBase):
    def __init__(self, address): pass
    def __int__(self): pass
    def __eq__(self, other): pass
    def __lt__(self, other): pass
    def __add__(self, other): pass
    def __sub__(self, other): pass
    def __hash__(self): pass

class _BaseNetwork(_IPAddressBase):
    def __init__(self, address): pass
    def hosts(self): pass
    def __iter__(self): pass
    def __getitem__(self, n): pass
    def __lt__(self, other): pass
    def __eq__(self, other): pass
    def __hash__(self): pass
    def __contains__(self, other): pass
    def overlaps(self, other): pass
    @property
    def broadcast_address(self): pass
    @property
    def hostmask(self): pass
    @property
    def with_prefixlen(self): pass
    @property
    def with_netmask(self): pass
    @property
    def with_hostmask(self): pass
    @property
    def num_addresses(self): pass
    @property
    def prefixlen(self): pass
    def address_exclude(self, other): pass
    def compare_networks(self, other): pass
    def subnets(self, prefixlen_diff=1, new_prefix=None): pass
    def supernet(self, prefixlen_diff=1, new_prefix=None): pass
    @property
    def is_multicast(self): pass
    @property
    def is_reserved(self): pass
    @property
    def is_link_local(self): pass
    @property
    def is_private(self): pass
    @property
    def is_global(self): pass
    @property
    def is_unspecified(self): pass
    @property
    def is_loopback(self): pass

class _BaseV4:
    def __init__(self, address): pass
    @property
    def max_prefixlen(self): pass
    @property
    def version(self): pass

class IPv4Address(_BaseV4, _BaseAddress):
    def __init__(self, address): pass
    @property
    def packed(self): pass
    @property
    def is_reserved(self): pass
    @property
    def is_private(self): pass
    @property
    def is_multicast(self): pass
    @property
    def is_unspecified(self): pass
    @property
    def is_loopback(self): pass
    @property
    def is_link_local(self): pass

class IPv4Interface(IPv4Address):
    network = Undefined(Any)
    netmask = Undefined(Any)
    hostmask = Undefined(Any)
    def __init__(self, address): pass
    def __eq__(self, other): pass
    def __lt__(self, other): pass
    def __hash__(self): pass
    @property
    def ip(self): pass
    @property
    def with_prefixlen(self): pass
    @property
    def with_netmask(self): pass
    @property
    def with_hostmask(self): pass

class IPv4Network(_BaseV4, _BaseNetwork):
    network_address = Undefined(Any)
    netmask = Undefined(Any)
    hosts = Undefined(Any)
    def __init__(self, address, strict=True): pass
    @property
    def is_global(self): pass

class _BaseV6:
    def __init__(self, address): pass
    @property
    def max_prefixlen(self): pass
    @property
    def version(self): pass

class IPv6Address(_BaseV6, _BaseAddress):
    def __init__(self, address): pass
    @property
    def packed(self): pass
    @property
    def is_multicast(self): pass
    @property
    def is_reserved(self): pass
    @property
    def is_link_local(self): pass
    @property
    def is_site_local(self): pass
    @property
    def is_private(self): pass
    @property
    def is_global(self): pass
    @property
    def is_unspecified(self): pass
    @property
    def is_loopback(self): pass
    @property
    def ipv4_mapped(self): pass
    @property
    def teredo(self): pass
    @property
    def sixtofour(self): pass

class IPv6Interface(IPv6Address):
    network = Undefined(Any)
    netmask = Undefined(Any)
    hostmask = Undefined(Any)
    def __init__(self, address): pass
    def __eq__(self, other): pass
    def __lt__(self, other): pass
    def __hash__(self): pass
    @property
    def ip(self): pass
    @property
    def with_prefixlen(self): pass
    @property
    def with_netmask(self): pass
    @property
    def with_hostmask(self): pass
    @property
    def is_unspecified(self): pass
    @property
    def is_loopback(self): pass

class IPv6Network(_BaseV6, _BaseNetwork):
    network_address = Undefined(Any)
    netmask = Undefined(Any)
    hosts = Undefined(Any)
    def __init__(self, address, strict=True): pass
    @property
    def is_site_local(self): pass
