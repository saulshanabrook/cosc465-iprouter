# Stubs for datetime (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from _datetime import *

MINYEAR = Undefined(Any)
MAXYEAR = Undefined(Any)
dbm = Undefined(Any)

class timedelta:
    def __new__(cls, days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0): pass
    def total_seconds(self): pass
    @property
    def days(self): pass
    @property
    def seconds(self): pass
    @property
    def microseconds(self): pass
    def __add__(self, other): pass
    __radd__ = Undefined(Any)
    def __sub__(self, other): pass
    def __rsub__(self, other): pass
    def __neg__(self): pass
    def __pos__(self): pass
    def __abs__(self): pass
    def __mul__(self, other): pass
    __rmul__ = Undefined(Any)
    def __floordiv__(self, other): pass
    def __truediv__(self, other): pass
    def __mod__(self, other): pass
    def __divmod__(self, other): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __hash__(self): pass
    def __bool__(self): pass
    def __reduce__(self): pass

class date:
    def __new__(cls, year, month=None, day=None): pass
    @classmethod
    def fromtimestamp(cls, t): pass
    @classmethod
    def today(cls): pass
    @classmethod
    def fromordinal(cls, n): pass
    def ctime(self): pass
    def strftime(self, fmt): pass
    def __format__(self, fmt): pass
    def isoformat(self): pass
    @property
    def year(self): pass
    @property
    def month(self): pass
    @property
    def day(self): pass
    def timetuple(self): pass
    def toordinal(self): pass
    def replace(self, year=None, month=None, day=None): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __hash__(self): pass
    def __add__(self, other): pass
    __radd__ = Undefined(Any)
    def __sub__(self, other): pass
    def weekday(self): pass
    def isoweekday(self): pass
    def isocalendar(self): pass
    def __reduce__(self): pass

class tzinfo:
    def tzname(self, dt): pass
    def utcoffset(self, dt): pass
    def dst(self, dt): pass
    def fromutc(self, dt): pass
    def __reduce__(self): pass

class time:
    def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None): pass
    @property
    def hour(self): pass
    @property
    def minute(self): pass
    @property
    def second(self): pass
    @property
    def microsecond(self): pass
    @property
    def tzinfo(self): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __hash__(self): pass
    def isoformat(self): pass
    def strftime(self, fmt): pass
    def __format__(self, fmt): pass
    def utcoffset(self): pass
    def tzname(self): pass
    def dst(self): pass
    def replace(self, hour=None, minute=None, second=None, microsecond=None, tzinfo=True): pass
    def __bool__(self): pass
    def __reduce__(self): pass

class datetime(date):
    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0, microsecond=0, tzinfo=None): pass
    @property
    def hour(self): pass
    @property
    def minute(self): pass
    @property
    def second(self): pass
    @property
    def microsecond(self): pass
    @property
    def tzinfo(self): pass
    @classmethod
    def fromtimestamp(cls, t, tz=None): pass
    @classmethod
    def utcfromtimestamp(cls, t): pass
    @classmethod
    def now(cls, tz=None): pass
    @classmethod
    def utcnow(cls): pass
    @classmethod
    def combine(cls, date, time): pass
    def timetuple(self): pass
    def timestamp(self): pass
    def utctimetuple(self): pass
    def date(self): pass
    def time(self): pass
    def timetz(self): pass
    def replace(self, year=None, month=None, day=None, hour=None, minute=None, second=None, microsecond=None, tzinfo=True): pass
    def astimezone(self, tz=None): pass
    def ctime(self): pass
    def isoformat(self, sep=''): pass
    @classmethod
    def strptime(cls, date_string, format): pass
    def utcoffset(self): pass
    def tzname(self): pass
    def dst(self): pass
    def __eq__(self, other): pass
    def __ne__(self, other): pass
    def __le__(self, other): pass
    def __lt__(self, other): pass
    def __ge__(self, other): pass
    def __gt__(self, other): pass
    def __add__(self, other): pass
    __radd__ = Undefined(Any)
    def __sub__(self, other): pass
    def __hash__(self): pass
    def __reduce__(self): pass

class timezone(tzinfo):
    def __new__(cls, offset, name=Undefined): pass
    def __getinitargs__(self): pass
    def __eq__(self, other): pass
    def __hash__(self): pass
    def utcoffset(self, dt): pass
    def tzname(self, dt): pass
    def dst(self, dt): pass
    def fromutc(self, dt): pass
