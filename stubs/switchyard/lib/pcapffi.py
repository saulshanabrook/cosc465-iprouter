# Stubs for switchyard.lib.pcapffi (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from enum import Enum
from collections import namedtuple

Interface = namedtuple('Interface', ['name', 'internal_name', 'description', 'isloop', 'isup', 'isrunning'])

PcapStats = namedtuple('PcapStats', ['ps_recv', 'ps_drop', 'ps_ifdrop'])

PcapPacket = namedtuple('PcapPacket', ['timestamp', 'capture_length', 'length', 'raw'])

PcapDev = namedtuple('PcapDev', ['dlt', 'nonblock', 'snaplen', 'version', 'pcap'])

class PcapException(Exception): pass

class Dlt(Enum):
    DLT_NULL = Undefined(Any)
    DLT_EN10MB = Undefined(Any)
    DLT_EN3MB = Undefined(Any)
    DLT_AX25 = Undefined(Any)
    DLT_PRONET = Undefined(Any)
    DLT_CHAOS = Undefined(Any)
    DLT_IEEE802 = Undefined(Any)
    DLT_ARCNET = Undefined(Any)
    DLT_SLIP = Undefined(Any)
    DLT_PPP = Undefined(Any)
    DLT_FDDI = Undefined(Any)
    DLT_RAW = Undefined(Any)
    DLT_LINUX_SLL = Undefined(Any)

class _PcapFfi:
    def __init__(self): pass
    @staticmethod
    def instance(): pass
    @property
    def version(self): pass
    def discoverdevs(self): pass
    @property
    def devices(self): pass
    def open_dumper(self, outfile, dltype=Undefined, snaplen=65535): pass
    def close_dumper(self, pcapdump): pass
    def write_packet(self, dumper, pkt, ts=None): pass
    def open_pcap_file(self, filename): pass
    def open_live(self, device, snaplen=65535, promisc=1, to_ms=100, nonblock=True): pass
    def close_live(self, pcap): pass
    def get_select_fd(self, xpcap): pass
    def send_packet(self, xpcap, xbuffer): pass
    def recv_packet(self, xpcap): pass
    def set_filter(self, xpcap, filterstr): pass
    def stats(self, xpcap): pass

def pcap_devices(): pass

class PcapDumper:
    def __init__(self, outfile): pass
    def write_packet(self, pkt, ts=None): pass
    def close(self): pass

class PcapReader:
    def __init__(self, filename, filterstr=None): pass
    def close(self): pass
    def recv_packet(self): pass

class PcapLiveDevice:
    def __init__(self, device, snaplen=65535, promisc=1, to_ms=100, filterstr=None): pass
    @staticmethod
    def set_bpf_filter_on_all_devices(filterstr): pass
    @property
    def dlt(self): pass
    def recv_packet(self, timeout): pass
    def send_packet(self, packet): pass
    def close(self): pass
    def stats(self): pass
    def set_filter(self, filterstr): pass
