# Stubs for switchyard.lib.packet.ipv6 (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from enum import Enum
from switchyard.lib.packet.packet import PacketHeaderBase

class IPv6ExtensionHeader(PacketHeaderBase):
    def __init__(self, optlenmultiplier): pass
    def pre_serialize(self, raw, pkt, i): pass
    def size(self): pass
    @property
    def nextheader(self): pass
    @nextheader.setter
    def nextheader(self, value): pass
    @property
    def protocol(self): pass
    @protocol.setter
    def protocol(self, value): pass
    def next_header_class(self): pass
    def to_bytes(self): pass
    nextheader = Undefined(Any)
    def from_bytes(self, raw): pass
    def __eq__(self, other): pass

class IPv6RouteOption(IPv6ExtensionHeader):
    def __init__(self, addr=Undefined): pass
    def to_bytes(self): pass
    def from_bytes(self, raw): pass

class IPv6Fragment(IPv6ExtensionHeader):
    def __init__(self, xid=0, offset=0, mf=False): pass
    @property
    def id(self): pass
    @property
    def offset(self): pass
    @property
    def morefragments(self): pass
    @property
    def mf(self): pass
    def to_bytes(self): pass
    def from_bytes(self, raw): pass

class IPv6Option:
    def __init__(self): pass
    def to_bytes(self): pass

class Pad1(IPv6Option):
    def __init__(self): pass
    def to_bytes(self): pass
    @staticmethod
    def from_bytes(raw): pass

class PadN(IPv6Option):
    def __init__(self, n=0): pass
    def to_bytes(self): pass
    @property
    def n(self): pass
    @staticmethod
    def from_bytes(raw): pass

class JumboPayload(IPv6Option):
    def __init__(self, len): pass
    def to_bytes(self): pass
    @property
    def len(self): pass
    @staticmethod
    def from_bytes(raw): pass

class TunnelEncapsulationLimit(IPv6Option):
    def __init__(self, limit): pass
    def to_bytes(self): pass
    @property
    def limit(self): pass
    @staticmethod
    def from_bytes(raw): pass

class RouterAlert(IPv6Option):
    def __init__(self, value): pass
    def to_bytes(self): pass
    @property
    def value(self): pass
    @staticmethod
    def from_bytes(raw): pass

class HomeAddress(IPv6Option):
    def __init__(self, addr): pass
    def to_bytes(self): pass
    @property
    def address(self): pass
    @staticmethod
    def from_bytes(raw): pass

class IPv6HopOption(IPv6ExtensionHeader):
    def __init__(self): pass
    def to_bytes(self): pass
    def from_bytes(self, raw): pass
    def add_option(self, optobj): pass
    def __getitem__(self, idx): pass
    def __len__(self): pass

class IPv6DestinationOption(IPv6HopOption): pass

class IPv6MobilityHeaderType(Enum):
    BindingRefreshRequest = Undefined(Any)
    HomeTestInit = Undefined(Any)
    CareOfTestInit = Undefined(Any)
    HomeTest = Undefined(Any)
    CareOfTest = Undefined(Any)
    BindingUpdate = Undefined(Any)
    BindingAcknowledgment = Undefined(Any)
    BindingError = Undefined(Any)

class IPv6Mobility(IPv6ExtensionHeader):
    def __init__(self): pass
    def pre_serialize(self, raw, pkt, i): pass
    def to_bytes(self, computecsum=True): pass
    def from_bytes(self, raw): pass

IPTypeClasses = Undefined(Any)

class IPv6(PacketHeaderBase):
    trafficclass = Undefined(Any)
    flowlabel = Undefined(Any)
    ttl = Undefined(Any)
    nextheader = Undefined(Any)
    srcip = Undefined(Any)
    dstip = Undefined(Any)
    def __init__(self): pass
    def size(self): pass
    def pre_serialize(self, raw, pkt, i): pass
    def to_bytes(self): pass
    def from_bytes(self, raw): pass
    def __eq__(self, other): pass
    def next_header_class(self): pass
    @property
    def trafficclass(self): pass
    @trafficclass.setter
    def trafficclass(self, value): pass
    @property
    def flowlabel(self): pass
    @flowlabel.setter
    def flowlabel(self, value): pass
    @property
    def nextheader(self): pass
    @nextheader.setter
    def nextheader(self, value): pass
    @property
    def ttl(self): pass
    @ttl.setter
    def ttl(self, value): pass
    @property
    def hopcount(self): pass
    @hopcount.setter
    def hopcount(self, value): pass
    @property
    def srcip(self): pass
    @srcip.setter
    def srcip(self, value): pass
    @property
    def dstip(self): pass
    @dstip.setter
    def dstip(self, value): pass
