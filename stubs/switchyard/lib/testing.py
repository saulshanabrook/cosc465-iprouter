# Stubs for switchyard.lib.testing (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
from switchyard.lib.packet import *
from switchyard.lib.address import *
from switchyard.lib.common import *
from collections import namedtuple

class PacketFormatter:
    @staticmethod
    def full_display(value=True): pass
    @staticmethod
    def format_pkt(pkt, cls=None): pass

class SwitchyTestEvent:
    MATCH_FAIL = Undefined(Any)
    MATCH_SUCCESS = Undefined(Any)
    MATCH_PARTIAL = Undefined(Any)
    EVENT_INPUT = Undefined(Any)
    EVENT_OUTPUT = Undefined(Any)
    __metaclass__ = Undefined(Any)
    display = Undefined(Any)
    def __init__(self): pass
    def match(self, evtype, **kwargs): pass
    def format_pkt(self, pkt): pass

class AbstractMatch:
    def match(self, pkt): pass

class ExactMatch(AbstractMatch):
    def __init__(self, pkt): pass
    def match(self, pkt): pass

class WildcardMatch(AbstractMatch):
    def __init__(self, pkt, wildcard_fields): pass
    def match(self, pkt): pass
    def __getattr__(self, attr): pass

class PacketMatcher:
    exact = Undefined(Any)
    predicates = Undefined(Any)
    def __init__(self, packet, *predicates, **kwargs): pass
    @property
    def packet(self): pass
    def match(self, packet): pass
    def show(self, cls): pass

class PacketInputTimeoutEvent(SwitchyTestEvent):
    timeout = Undefined(Any)
    def __init__(self, timeout): pass
    def __eq__(self, other): pass
    def match(self, evtype, **kwargs): pass
    def generate_packet(self, use_timestamp, timestamp): pass

class PacketInputEvent(SwitchyTestEvent):
    device = Undefined(Any)
    packet = Undefined(Any)
    display = Undefined(Any)
    def __init__(self, device, packet, display=None): pass
    def __eq__(self, other): pass
    def match(self, evtype, **kwargs): pass
    def generate_packet(self, use_timestamp, timestamp): pass

class PacketOutputEvent(SwitchyTestEvent):
    matches = Undefined(Any)
    device_packet_map = Undefined(Any)
    display = Undefined(Any)
    def __init__(self, *args, **kwargs): pass
    def match(self, evtype, **kwargs): pass
    def __eq__(self, other): pass

TestScenarioEvent = namedtuple('TestScenarioEvent', ['event', 'description', 'timestamp'])

class Scenario:
    interface_map = Undefined(Any)
    pending_events = Undefined(Any)
    completed_events = Undefined(Any)
    timer = Undefined(Any)
    next_timestamp = Undefined(Any)
    timeoutval = Undefined(Any)
    support_files = Undefined(Any)
    def __init__(self, name): pass
    @property
    def name(self): pass
    def add_file(self, fname, text): pass
    def write_files(self): pass
    def add_interface(self, interface_name, macaddr, ipaddr=None, netmask=None): pass
    def interfaces(self): pass
    def ports(self): pass
    def expect(self, event, description): pass
    def get_failed_test(self): pass
    def next(self): pass
    def testfail(self, message): pass
    def timer_expiry(self, signum, stackframe): pass
    def cancel_timer(self): pass
    def testpass(self): pass
    @staticmethod
    def wrapevent(description, expected_event): pass
    def print_summary(self): pass
    def done(self): pass
    def __eq__(self, other): pass
    def scenario_sanity_check(self): pass

def compile_scenario(scenario_file, output_filename=None): pass
def uncompile_scenario(scenario_file): pass
def get_test_scenario_from_file(sfile): pass
