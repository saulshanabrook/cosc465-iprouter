# Stubs for switchyard.lib.topo.topobuild (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any
import json
from switchyard.lib.topo.util import *

nompl = Undefined(Any)

class Node:
    ifnum = Undefined(Any)
    def __init__(self, *args, **kwargs): pass
    @property
    def nodetype(self): pass
    @property
    def interfaces(self): pass
    def hasInterface(self, intf): pass
    def __contains__(self, intf): pass
    def getInterface(self, devname): pass
    def addInterface(self, ethaddr=None, ipaddr=None, netmask=None): pass
    def asDict(self): pass

class Host(Node):
    def __init__(self, *args, **kwargs): pass

class Switch(Node):
    def __init__(self, *args, **kwargs): pass

class Router(Node):
    def __init__(self, *args, **kwargs): pass

class Encoder(json.JSONEncoder):
    def __init__(self, *args, **kwargs): pass
    def default(self, o): pass

class Topology:
    def __init__(self, name='', nxgraph=None, auto_macs=True): pass
    @property
    def name(self): pass
    @name.setter
    def name(self, value): pass
    @property
    def auto_macs(self): pass
    @property
    def nxgraph(self): pass
    @nxgraph.setter
    def nxgraph(self, value): pass
    def __contains__(self, nodename): pass
    def hasNode(self, nodename): pass
    def getNode(self, name): pass
    def getEdge(self, node1, node2): pass
    def hasLink(self, node1, node2): pass
    def hasEdge(self, node1, node2): pass
    def getLink(self, node1, node2): pass
    @property
    def links(self): pass
    @property
    def nodes(self): pass
    @property
    def hosts(self): pass
    @property
    def switches(self): pass
    @property
    def routers(self): pass
    def addHost(self, name=None): pass
    def neighbors(self, node): pass
    def edges_from(self, node): pass
    def removeNode(self, name): pass
    def removeLink(self, node1, node2): pass
    def addSwitch(self, name=None): pass
    def addRouter(self, name=None): pass
    def addLink(self, node1, node2, capacity, delay): pass
    def setLinkCharacteristics(self, node1, node2, capacity=None, delay=None): pass
    def serialize(self): pass
    @staticmethod
    def unserialize(jsonstr): pass
    def assignIPAddresses(self, prefix=None): pass
    def getLinkInterfaces(self, node1, node2): pass
    def setInterfaceAddresses(self, node, interface, mac=None, ip=None, netmask=None): pass
    def getInterfaceAddresses(self, node, interface): pass
    def addNodeLabelPrefix(self, prefix=None, copy=False): pass
    nxgraph = Undefined(Any)
    def union(self, other, rename=False): pass

def show_graph(cn_topo, showintfs=False, showaddrs=False): pass
def save_graph(cn_topo, filename, showintfs=False, showaddrs=False): pass
def load_from_file(filename): pass
def save_to_file(cn_topo, filename): pass
